{"version":3,"sources":["components/EmployeeCard/EmployeeCard/EmployeeCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","components/Filter/Filter.js","components/Sort/Sort.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","name","email","role","department","Wrapper","children","Title","Filter","SearchForm","htmlFor","onChange","handleInputChange","value","type","placeholder","id","onClick","handleFormSubmit","Directory","state","employees","employeeNames","selectedEmployee","searchEmployees","names","map","employee","setState","event","target","preventDefault","search","Sort","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"soCA0BeA,MAvBf,SAAsBC,GACpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAME,MAEhC,4BACE,0CADF,IAC2BF,EAAMG,OAEjC,4BACE,yCADF,IAC0BH,EAAMI,MAEhC,4BACE,+CADF,IACgCJ,EAAMK,gB,MCXjCC,MAJf,SAAiBN,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMO,W,MCG1BC,MAJf,SAAeR,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAMO,WCIvBE,MANf,WACI,OACI,mCCqBSC,MAvBjB,SAAoBV,GAChB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOU,QAAQ,UAAf,WACA,2BACEC,SAAUZ,EAAMa,kBAChBC,MAAOd,EAAMc,MACbZ,KAAK,SACLa,KAAK,OACLd,UAAU,eACVe,YAAY,yBACZC,GAAG,WAEL,6BACA,4BAAQC,QAASlB,EAAMmB,iBAAkBlB,UAAU,mBAAnD,a,OC+EKmB,E,4MAtFbC,MAAQ,CACNC,UAAWA,EACXC,cAAe,GACfC,iBAAkB,I,EAGpBC,gBAAkB,WAChB,IAAIC,EAAQJ,EAAUK,KAAI,SAAAC,GAAQ,OAAIA,EAAS1B,QAC/C,EAAK2B,SAAS,CAACN,cAAeG,K,EAGhCb,kBAAoB,SAAAiB,GAClB,IAAMhB,EAAQgB,EAAMC,OAAOjB,MACrBZ,EAAO4B,EAAMC,OAAO7B,KAC1B,EAAK2B,SAAL,eACG3B,EAAOY,K,EAIZK,iBAAmB,SAAAW,GACjBA,EAAME,iBACN,EAAKP,gBAAgB,EAAKJ,MAAMY,S,uDAIlC,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,6BACA,kBAAC,EAAD,MACA,kBAACC,EAAD,CACEpB,MAAOqB,KAAKd,MAAMY,OAClBpB,kBAAmBsB,KAAKtB,kBACxBM,iBAAkBgB,KAAKhB,mBAEzB,kBAAC,EAAD,CACGjB,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,aAE5B,kBAAC,EAAD,CACGH,KAAMoB,EAAU,GAAGpB,KACnBC,MAAOmB,EAAU,GAAGnB,MACpBC,KAAMkB,EAAU,GAAGlB,KACnBC,WAAYiB,EAAU,GAAGjB,kB,GAjFV+B,IAAMC,WCGVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07f70d2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Employee.css\";\r\n\r\nfunction EmployeeCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n          <li>\r\n            <strong>Email:</strong> {props.email}\r\n          </li>\r\n          <li>\r\n            <strong>Role:</strong> {props.role}\r\n          </li>\r\n          <li>\r\n            <strong>Department:</strong> {props.department}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nfunction Filter (){\r\n    return(\r\n        <div> </div>\r\n    )\r\n};\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"search\">Search:</label>\r\n          <input\r\n            onChange={props.handleInputChange}\r\n            value={props.value}\r\n            name=\"search\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search for an employee\"\r\n            id=\"search\"\r\n          />\r\n          <br />\r\n          <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n  \r\n  export default SearchForm;","import React from 'react';\nimport './App.css';\nimport EmployeeCard from './components/EmployeeCard/EmployeeCard/EmployeeCard';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Title from './components/Title/Title';\nimport Filter from './components/Filter/Filter';\nimport Sort from './components/Sort/Sort';\nimport employees from \"./employees.json\"\n\nclass Directory extends React.Component {\n  state = {\n    employees: employees,\n    employeeNames: [], \n    selectedEmployee: \"\"\n  };\n\n  searchEmployees = () => {\n    let names = employees.map(employee => employee.name); \n    this.setState({employeeNames: names});\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.searchEmployees(this.state.search);\n  };\n\nrender(){\n  return (\n    <Wrapper>\n      <Title> Employee Directory </Title>\n      <Filter></Filter>\n      <Sort\n        value={this.state.search}\n        handleInputChange={this.handleInputChange}\n        handleFormSubmit={this.handleFormSubmit}\n      />\n      <EmployeeCard \n         name={employees[0].name}\n         email={employees[0].email}\n         role={employees[0].role}\n         department={employees[0].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[1].name}\n         email={employees[1].email}\n         role={employees[1].role}\n         department={employees[1].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[2].name}\n         email={employees[2].email}\n         role={employees[2].role}\n         department={employees[2].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[3].name}\n         email={employees[3].email}\n         role={employees[3].role}\n         department={employees[3].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[4].name}\n         email={employees[4].email}\n         role={employees[4].role}\n         department={employees[4].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[5].name}\n         email={employees[5].email}\n         role={employees[5].role}\n         department={employees[5].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[6].name}\n         email={employees[6].email}\n         role={employees[6].role}\n         department={employees[6].department}> \n      </EmployeeCard>\n      <EmployeeCard \n         name={employees[7].name}\n         email={employees[7].email}\n         role={employees[7].role}\n         department={employees[7].department}> \n      </EmployeeCard>\n    </Wrapper>\n  );\n }\n}\nexport default Directory;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}